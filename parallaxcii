#!/usr/bin/env python3

import curses
import time
import threading
import sounddevice as sd
import numpy as np

LAYER_SKY = """
                 *            *       .                    *            *       .                    *            *       .   
      .       .       *       .          *       .       .       *       .          *       .       .       *       .          * 
                .         *      .    *                   .         *      .    *                   .         *      .    *   
    *       .      *  .       *      .        *       .      *  .       *      .        *       .      *  .       *      .    
                *        .     .     *                    *        .     .     *                    *        .     .     *    
  .    *   .       .        *      .    *   .    *   .       .        *      .    *   .    *   .       .        *      .    * 
        .        *     .       *       .          .        *     .       *       .          .        *     .       *       .  
               *     .    * .    .     *                 *     .    * .    .     *                 *     .    * .    .     *  
 *      .       .       *       .     .    *      .       .       *       .     .    *      .       .       *       .     .   
.                                         .                                         .                                         
"""

LAYER_CLOUDS = """
  ⣠⣾███████████⣷⣄                       ⣠⣾███████████⣷⣄                                                       
 ⣼███████████████████⣧                 ⣼███████████████▒▒▒▒▒⣧                       ⣠⣾███████████████⣷⣄        
⣸███████████████████████⣿⡄            ⣸███████▒▒▒▒▒▒▒▒████████⣿⡄                 ⣸█▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒████⣿⡄    
⣿██████████▓▓▓▓▓███████████⣿          ⣿██████████▓▓▓▓▓███████████⣿               ⣿██████████▓▓▓▓▓███████████⣿   
⠉⠛█████▓▓▒▒▒▒▒▓▓███████████⠁          ⠉⠛█████▓▓▒▒▒▒▒▓▓███████████⠁               ⠉⠛█████▓▓▒▒▒▒▒▓▓███████████⠁   
   ⠉⠙⠛▒▒░░▒▒▓▓▓▓██⠟                     ⠉⠙⠛▒▒▒▒▒▓▓▓▓██⠟                            ⠉⠙⠛▒▒░░▒▒▓▓▓▓██⠟            
         ⠉⠉                  
"""

LAYER_MOUNTAINS = """
                                                                       ▓▓▓▓                                                              
            ▓▓▓                                                       ▓▓▒▒▓▓                                                             
          ▓▓▒░▒▓▓                                  ▓                 ▓▓▒░░▒▓▓                 ▓▓▓▓▒▓▓                                    
        ▓▓▒░░░░░▒▓▓                 ▓▓▒▓▒▓▓      ▓▓░▒▓▓               ▓▓▒░░▒▓▓               ▓▓▒░░░░▒▓▓                                  
      ▓▓▒░░░░░░░░░▒▓▓           ▓▓▒░░░░░░▒▓▓    ▓▓▒░░▒▓▓           ▓▓▒░░░░░░░░░▒▓▓       ▓▓▒░░░░░░░░░░░░░▒▓▓                             
     ▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓▓▓▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒▓▓       ▓▓▒▒▒▓▒▒▒▒▓▓      
▓▓████▓▓████████████▓▓▓▓██████████████████▓▓▓▓██████████████████▓▓▓▓████████████▓▓▓▓████████████▓▓▓▓████████████▓▓▓▓█████▓▓▓▓███████████▓▓
"""

LAYER_PALM_LEAFS = """
   ▓▓▓       ▓▓▓▓                         ▓▓▓▓                                      ▓▓▓                                             ▓▓▓                       ▓▓▓   
 ▓████▓     ▓████▓   ▓████▓             ▓████▓     ▓▓      ▓████▓                 ▓████▓     ▓████▓                               ▓████▓   ▓████▓  ▓████▓   ▓████▓  
▓██████▓   ▓██████▓ ▓██████▓           ▓██████▓  ▓█████▓  ▓██████▓               █▓ ▓█████  ██████▓█▓                             ▓██████▓ ▓██████▓ ▓██████▓▓██████▓
   ▓▓▓         ▓▓▓       ▓▓▓                 ▓▓▓      ▓▓▓       ▓▓                  ▓▓▓         ▓▓▓                                     ▓▓▓       ▓▓▓      ▓▓▓      
   """

LAYER_TRUNKS = """
   █            █         █                  █          █        █                   █          █                                        █         █        █       
    █           █          █                █           █         █                  █           █                                        █       █        █        
     █          █           █               █           █          █                █            █                                         █     █        █         
      █         █            █             █            █           █              █            █                                           █    █        █         
   """

LAYER_ROAD = """
██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████
▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░░
   """


LAYER_LOGO = """

       ██████   █████  ██████   █████  ██      ██       █████  ██   ██  ██████ ██ ██               
       ██   ██ ██   ██ ██   ██ ██   ██ ██      ██      ██   ██  ██ ██  ██      ██ ██               
       ██████  ███████ ██████  ███████ ██      ██      ███████   ███   ██      ██ ██               
       ██      ██   ██ ██   ██ ██   ██ ██      ██      ██   ██  ██ ██  ██      ██ ██               
       ██      ██   ██ ██   ██ ██   ██ ███████ ███████ ██   ██ ██   ██  ██████ ██ ██               
   """

LAYERS = [
    {"data": LAYER_SKY, "speed": 0.05, "y_offset": 0, "color": (2, 10)},
    {"data": LAYER_CLOUDS, "speed": 0.6, "y_offset": 1, "color": (3, 11)},
    {"data": LAYER_MOUNTAINS, "speed": 0.9, "y_offset": 2, "color": (4, 4)},
    {"data": LAYER_PALM_LEAFS, "speed": 1.9, "y_offset": 1, "color": (5, 5)},
    {"data": LAYER_TRUNKS, "speed": 1.9, "y_offset": 5, "color": (6, 6)},
    {"data": LAYER_ROAD, "speed": 1.9, "y_offset": 8, "color": (7, 7)},
    {"data": LAYER_LOGO, "speed": 0.0, "y_offset": 6, "color": (8, 12)},
]


def draw_parallax(stdscr):
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_WHITE, -1)
    curses.init_pair(2, curses.COLOR_WHITE, 19)
    curses.init_pair(3, 81, 19)
    curses.init_pair(4, curses.COLOR_YELLOW, -1)
    curses.init_pair(5, 70, -1)
    curses.init_pair(6, 94, -1)
    curses.init_pair(7, curses.COLOR_YELLOW, -1)
    curses.init_pair(8, 235, -1)
    curses.init_pair(10, curses.COLOR_WHITE, 25)
    curses.init_pair(11, 81, 25)
    curses.init_pair(12, 237, -1)
    curses.curs_set(0)
    stdscr.nodelay(True)
    stdscr.timeout(50)

    offsets = [0.0 for _ in LAYERS]
    pulse = {'active': False, 'cooldown': 0}

    # Audio beat detection thread
    def audio_listener():
        def callback(indata, frames, time, status):
            volume = np.linalg.norm(indata) * 10
            if volume > 3.9 and pulse['cooldown'] <= 0:
                pulse['active'] = True
                pulse['cooldown'] = 4  # cooldown in frames
        with sd.InputStream(callback=callback, channels=1, samplerate=44100):
            while True:
                time.sleep(0.05)

    threading.Thread(target=audio_listener, daemon=True).start()

    while True:
        stdscr.erase()

        max_y, max_x = stdscr.getmaxyx()

        if max_y < 10 or max_x < 20:
            stdscr.addstr(0, 0, "Terminal too small")
            stdscr.refresh()
            time.sleep(0.1)
            continue

        frame_height = min(get_required_height() + 2, max_y - 2)
        frame_width = max_x // 2
        top = (max_y - frame_height) // 2
        left = (max_x - frame_width) // 2


        inner_height = frame_height - 2
        inner_width = frame_width - 2
        inner_top = top + 1
        inner_left = left + 1

        # Initialize blank composed lines
        composed_lines = [[(' ', 1) for _ in range(inner_width)] for _ in range(inner_height)]

        for i, layer in enumerate(LAYERS):
            lines = layer["data"].strip('\n').split('\n')
            speed = layer["speed"]
            y_offset = layer.get("y_offset", 0)
            max_line_len = max(len(line) for line in lines) if lines else 1
            if speed > 0.0:
                offsets[i] = (offsets[i] + speed) % max_line_len
            start = int(offsets[i])

            for local_row, line in enumerate(lines):
                global_row = local_row + y_offset
                if 0 <= global_row < inner_height:
                    padded_line = (line + line)[start:start + inner_width]
                    for col in range(min(inner_width, len(padded_line))):
                        char = padded_line[col]
                        if char != ' ':
                            color_pair = layer.get("color", (1, 1))
                            color_index = color_pair[1] if pulse['active'] else color_pair[0]
                            composed_lines[global_row][col] = (char, color_index)

        # Fill inner background with spaces
        for row in range(inner_height):
            try:
                stdscr.addstr(inner_top + row, inner_left, ' ' * inner_width, curses.color_pair(1))
            except curses.error:
                pass

        # Draw composed lines
        for row in range(inner_height):
            for col in range(inner_width):
                ch, color = composed_lines[row][col]
                try:
                    stdscr.addch(inner_top + row, inner_left + col, ch, curses.color_pair(color) | curses.A_BOLD)
                except curses.error:
                    pass

        stdscr.refresh()

        if stdscr.getch() == ord('q'):
            break

        if pulse['cooldown'] > 0:
            pulse['cooldown'] -= 1
        else:
            pulse['active'] = False

        time.sleep(0.001)


def get_required_height():
    return max(
        layer.get("y_offset", 0) + len(layer["data"].strip().splitlines())
        for layer in LAYERS
    )


def main():
    curses.wrapper(draw_parallax)


if __name__ == "__main__":
    main()
